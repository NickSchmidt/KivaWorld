#BlueJ class context
comment0.target=Kiva
comment0.text=\r\n\ This\ is\ the\ <b>Kiva\ Robot\!</b>\ Until\ this\ Robot\ becomes\ automated,\ humans\ are\ still\ in\ control.\r\n\ \r\n\ This\ Kiva\ Robot\ contains\ a\ bunch\ of\ knowledge\ such\ as\:\r\n\ <p>\#currentLocation\ --\ Gives\ the\ current\ location\ of\ the\ Kiva\ Robot\ as\ a\ point\ on\ a\ FloorMap\ (x,\ y).</p>\r\n\ <p>\#directionFacing\ --\ Gives\ the\ direction\ the\ Kiva\ Robot\ is\ facing\ (Up,\ Down,\ Left,\ Right).</p>\r\n\ <p>\#map\ --\ Is\ a\ FloorMap\ representation\ of\ the\ Kiva\ Robot's\ world.\ Includes\ OBSTACLES,\ POD,\ DROP_ZONE,\r\n\ \ \ \ \ \ \ \ \ Kiva\ location,\ and\ boundaries\ of\ the\ FloorMap.</p>\r\n\ <p>\#carryingPod\ --\ True\ if\ the\ Kiva\ Robot\ is\ carrying\ a\ pod.\ Otherwise,\ false.</p>\r\n\ <p>\#successfullyDropped\ --\ True\ if\ the\ Kiva\ Robot\ successfully\ dropped\ a\ pod\ at\ a\ DROP_ZONE\ location.</p>\r\n\ <p>\#motorLifetime\ --\ How\ long\ until\ this\ Robot\ dies\ \:).\ Life\ expectancy\ is\ at\ 20,000\ hours,\ but\ configured\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ as\ milliseconds.\ (Obviously\ for\ information\ purposes\ and\ not\ to\ make\ me\ convert\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ milliseconds\ to\ hours).</p>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ @author\ Nicholas\ Schmidt\r\n\ @version\ ATA\ Coding\ Project\ due\ 10/22/2021\r\n
comment1.params=map
comment1.target=Kiva(FloorMap)
comment1.text=\r\n\ Creates\ a\ new\ Kiva\ Robot\r\n\ \r\n\ @param\ map\ Floormap.\ Creates\ a\ map\ for\ the\ Kiva\ Robot\ with\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ current\ location\ of\ the\ Kiva\ Robot\ at\ Point\ "K"\ on\ the\ map.\r\n
comment10.params=nextLocation
comment10.target=void\ checkOutOfBounds(edu.duke.Point)
comment10.text=\r\n\ Checks\ if\ you're\ trying\ to\ dispose\ of\ the\ Kiva\ Robot\ by\ plummetting\ it\ outside\ of\ it's\ home\ world\r\n\ \r\n\ @param\ nextLocation\ Point\r\n\ @return\ Nothing.\ Just\ checking\ how\ devious\ you\ are.\r\n
comment11.params=
comment11.target=void\ moveForward()
comment11.text=\r\n\ Moves\ the\ Kiva\ Robot\ 1\ coordinate\ plane\ direction\ at\ a\ time\ (x\ or\ y)\r\n\ \r\n\ <p>This\ method\ first\ checks\ if\ the\ Kiva\ Robot\ can\ legally\ move\ forward.\r\n\ Then,\ if\ legal,\ sets\ the\ "currentLocation"\ to\ the\ "nextLocation."\r\n\ And\ finally,\ updates\ "directionFacing."\ Although,\ after\ looking\ at\ this...\ \r\n\ I\ don't\ think\ that's\ necessary.</p>\r\n\ \r\n\ @see\ move()\r\n\ @return\ Nothing.\r\n
comment12.params=
comment12.target=void\ turnLeft()
comment12.text=\r\n\ Turns\ the\ direction\ of\ the\ Kiva\ Robot\ left\r\n
comment13.params=
comment13.target=void\ turnRight()
comment13.text=\ \r\n\ Turns\ the\ direction\ of\ the\ Kiva\ Robot\ right\r\n
comment14.params=
comment14.target=void\ takePod()
comment14.text=\r\n\ \ Takes\ pod\ if\ current\ location\ is\ POD\r\n\ \r\n\ <p>If\ the\ FloorMapObject\ is\ a\ POD\ at\ the\ Kiva\ Robot's\ currentLocation,\ the\ Kiva\ Robot\ can\ TAKE.\r\n\ Otherwise,\ noPodException\ is\ thrown.</p>\r\n\ \r\n\ <p>Also\ checks\ if\ the\ FloorMapObject\ is\ a\ POD\ and\ if\ the\ Kiva\ Robot\ is\ already\ carrying\ a\ pod.\ Kiva\ Robot\r\n\ cannot\ carry\ more\ than\ 1\ POD</p>\r\n\ \r\n\ @exception\ NoPodException\ on\ not\ a\ POD\ location.\r\n\ @exception\ IllegalMoveException\ on\ already\ carrying\ a\ POD\r\n\ \r\n\ @return\ Nothing.\r\n
comment15.params=
comment15.target=void\ dropPod()
comment15.text=\r\n\ Drops\ pod\ if\ current\ location\ is\ DROP_ZONE\r\n\ \r\n\ <p>Also\ checks\ if\ the\ Kiva\ Robot\ is\ carrying\ a\ POD.\ Cannot\ drop\ a\ POD\ if\ no\ POD\ exists.</p>\r\n\ \r\n\ @exception\ IllegalDropZoneException\ on\ not\ a\ DROP_ZONE\r\n\ \r\n\ \r\n\ @exception\ IllegalMoveException\ on\ move(drop)\ if\ Kiva\ Robot\ has\ no\ POD\r\n\ @return\ Nothing.\r\n
comment16.params=command
comment16.target=void\ move(KivaCommand)
comment16.text=\r\n\ Controls\ the\ movement\ of\ the\ Kiva\ Robot\ based\ on\ the\ user\ input.\r\n\ \r\n\ @param\ command\ KivaCommand.\ Is\ the\ user's\ intention\ for\ the\ Kiva\ Robot.\ FORWARD,\ TURN_LEFT,\ TURN_RIGHT,\ TAKE,\ DROP\r\n\ \r\n\ @return\ Nothing.\r\n
comment2.params=map\ currentLocation
comment2.target=Kiva(FloorMap,\ edu.duke.Point)
comment2.text=\r\n\ Creates\ a\ Kiva\ Robot\ with\ user-defined\ location\r\n\ \r\n\ @param\ map\ FloorMap.\ Creates\ a\ home\ for\ the\ Kiva\ Robot\ with\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ location\ of\ the\ Kiva\ Robot\ at\ God's\ (You...\ You're\ God.\ Not\ the\ robot)\r\n\ \ \ \ \ \ \ \ \ \ \ \ location.\r\n\ @param\ currentLocation\ Point.\ User-defined\ location\ for\ the\ Kiva\ Robot\r\n
comment3.params=
comment3.target=boolean\ isCarryingPod()
comment3.text=\r\n\ Checks\ if\ the\ robot\ has\ a\ pod\ -\ initialized\ to\ false\r\n\ @return\ True\ if\ carrying\ pod.\ False\ if\ not\ carrying\ pod\r\n
comment4.params=
comment4.target=boolean\ isSuccessfullyDropped()
comment4.text=\r\n\ Checks\ if\ the\ robot\ can\ drop\ a\ pod\ -\ initialized\ to\ false\r\n\ @return\ True\ if\ drop\ is\ successful.\ False\ if\ drop\ is\ not\ successful\r\n
comment5.params=
comment5.target=long\ getMotorLifetime()
comment5.text=\r\n\ Gets\ the\ lifetime\ of\ the\ Robot's\ motor\ in\ milliseconds\r\n\ @return\ the\ lifetime\ of\ the\ Robot's\ motor\ in\ milliseconds\r\n
comment6.params=
comment6.target=void\ incrementMotorLifetime()
comment6.text=\r\n\ Increments\ the\ amount\ of\ Robot's\ motor\ life\ by\ 1000ms\r\n
comment7.params=
comment7.target=edu.duke.Point\ getCurrentLocation()
comment7.text=\r\n\ Gets\ the\ current\ location\ as\ (x,\ y)\r\n\ @return\ the\ current\ location\ of\ the\ robot\r\n
comment8.params=
comment8.target=FacingDirection\ getDirectionFacing()
comment8.text=\r\n\ Gets\ the\ direction\ the\ Robot\ is\ facing\r\n\ @return\ the\ direction\ the\ Robot\ is\ facing\r\n
comment9.params=nextLocation
comment9.target=void\ moveExceptionHelper(edu.duke.Point)
comment9.text=\ \r\n\ Check\ if\ the\ next\ move\ is\ legal\r\n\ \r\n\ <p>This\ method\ identifies\ the\ next\ move\ for\ the\ Kiva\ Robot\ and\ checks\ if\ the\ move\ is\ LEGAL.</p>\r\n\ \r\n\ @param\ nextLocation\ nextLocation\ is\ created\ based\ on\ the\ move()\ method.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ For\ example\:\ if\ move()\ FORWARD\ facing\ direction\ UP.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ The\ nextLocation\ is\ (currentLocation.x,\ currentLocation.y\ -\ 1).\r\n\ @return\ Nothing.\ It's\ just\ a\ check...\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ @exception\ java.lang.IllegalMoveException\ on\ illegal\ moves\r\n
numComments=17
